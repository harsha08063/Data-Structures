def add_node(v):
    global node_count
    if v in nodes:
        print("Node already exits")
    else:
        node_count += 1
        nodes.append(v)
        for i in graph:  # to add columns in graph
            i.append("0")
        temp = []
        for i in range(node_count):  # to add rows in graph
            temp.append("0")
        graph.append(temp)
def add_edge(v1, v2,cost):
    if v1 not in nodes:
        print(v1," does not exist in graph")
    elif v2 not in nodes:
        print(v2,"does not exist in graph")
    else:
        index1 = nodes.index(v1)
        index2 = nodes.index(v2)
        graph[index1][index2] = cost
        graph[index2][index1] = cost
def del_node(v):
    global node_count
    if v not in nodes:
        print(v,"does not exist in graph")
    else:
        index1=nodes.index(v)
        node_count-=1
        nodes.remove(v)
        graph.pop(index1)
        for i in graph:
            i.pop(index1)
def del_edge(v1,v2):
    if v1 not in nodes:
        print(v1,"does not exist in graph")
    elif v2 not in nodes:
        print(v2,"does not exist in graph")
    else:
        index1=nodes.index(v1)
        index2=nodes.index(v2)
        graph[index1][index2]=0
        graph[index2][index1]=0
def print_graph():  # to print adjacency matrix
    for i in range(node_count):
        for j in range(node_count):
            print(graph[i][j], end=" ")
        print()
nodes = []
graph = []
node_count = 0
print(nodes)
print(graph)
add_node("A")
add_node("B")
add_node("C")

add_edge("A", "B",10)
add_edge("A", "C",20)
add_edge("B", "C",30)
print(nodes)
print(graph)
print_graph()
del_node("B")
print(nodes)
print(graph)
print_graph()
print()
del_edge("A","C")
print_graph()
